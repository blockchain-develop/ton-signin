#include "imports/stdlib.fc";

cell load_data() inline {
    cell data = get_data();
    slice ds = data.begin_parse();
    if (ds.slice_bits() == 0) {
        return new_dict();
    } else {
        return data;
    }
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    int user_id = in_msg_body~load_uint(64);

    cell data = get_data();
    slice ds = data.begin_parse();
    cell dic = ds.slice_bits() == 0 ? new_dict() : data;
    
    if (op == 1) {
        dic~udict_set(64,user_id,in_msg_body);
        set_data(dic);
        return();
    }
}

(int) get_user(int id) method_id {
    cell dic = load_data();
    (slice payload, int success) = dic.udict_get?(64,id);
    throw_unless(98, success);

    int valid_until = payload~load_uint(64);
    return (valid_until);
}
